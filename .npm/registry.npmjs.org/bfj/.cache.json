{"_id":"bfj","_rev":"11-316e4ce01236d608a571670b1e328a61","name":"bfj","description":"Big-friendly JSON. Asynchronous streaming functions for large JSON data sets.","dist-tags":{"latest":"2.1.0"},"versions":{"0.0.1":{"name":"bfj","version":"0.0.1","description":"Big-friendly JSON","homepage":"https://github.com/philbooth/node-bfj","bugs":{"url":"https://github.com/philbooth/node-bfj/issues"},"license":"MIT","author":{"name":"Phil Booth","url":"https://github.com/philbooth"},"main":"./src","keywords":["json","streamify","stringify","parse","serialise","serialize","read","write","fast"],"repository":{"type":"git","url":"https://github.com/philbooth/node-bfj.git"},"dependencies":{"check-types":"2.2.x"},"devDependencies":{"jshint":"2.5.x","mocha":"2.1.x","chai":"1.10.x","mockery":"1.4.x","spooks":"2.0.x"},"scripts":{"test":"mocha --ui tdd --reporter spec --recursive --colors test","lint":"jshint src"},"contributors":[{"name":"Phil Booth","email":"pmbooth@gmail.com","url":"https://github.com/philbooth"}],"gitHead":"1395c27817475c20c86f4c90f4b335eceadab0d2","_id":"bfj@0.0.1","_shasum":"d5079d9492aca221ce152cdb22f83cb860c1fb42","_from":".","_npmVersion":"2.5.1","_nodeVersion":"0.12.0","_npmUser":{"name":"philbooth","email":"pmbooth@gmail.com"},"maintainers":[{"name":"philbooth","email":"pmbooth@gmail.com"}],"dist":{"shasum":"d5079d9492aca221ce152cdb22f83cb860c1fb42","tarball":"https://registry.npmjs.org/bfj/-/bfj-0.0.1.tgz"},"directories":{}},"0.1.0":{"name":"bfj","version":"0.1.0","description":"Big-friendly JSON. Asynchronous streaming functions for large JSON data sets.","homepage":"https://github.com/philbooth/bfj","bugs":{"url":"https://github.com/philbooth/bfj/issues"},"license":"MIT","author":{"name":"Phil Booth","url":"https://github.com/philbooth"},"main":"./src","keywords":["json","streamify","stringify","walk","parse","serialise","serialize","read","write","fast"],"repository":{"type":"git","url":"https://github.com/philbooth/bfj.git"},"dependencies":{"check-types":"3.1.x"},"devDependencies":{"jshint":"2.6.x","mocha":"2.2.x","chai":"2.1.x","mockery":"1.4.x","spooks":"2.0.x"},"scripts":{"test":"mocha --ui tdd --reporter spec --recursive --colors --slow 120 test","lint":"jshint src"},"contributors":[{"name":"Phil Booth","email":"pmbooth@gmail.com","url":"https://github.com/philbooth"}],"gitHead":"acf60b185e1e6ab96f71508780bdb5cf51899108","_id":"bfj@0.1.0","_shasum":"87f92f0b098f3f1889a0c8222427591c16704fba","_from":".","_npmVersion":"2.5.1","_nodeVersion":"0.12.0","_npmUser":{"name":"philbooth","email":"pmbooth@gmail.com"},"maintainers":[{"name":"philbooth","email":"pmbooth@gmail.com"}],"dist":{"shasum":"87f92f0b098f3f1889a0c8222427591c16704fba","tarball":"https://registry.npmjs.org/bfj/-/bfj-0.1.0.tgz"},"directories":{}},"0.2.0":{"name":"bfj","version":"0.2.0","description":"Big-friendly JSON. Asynchronous streaming functions for large JSON data sets.","homepage":"https://github.com/philbooth/bfj","bugs":{"url":"https://github.com/philbooth/bfj/issues"},"license":"MIT","author":{"name":"Phil Booth","url":"https://github.com/philbooth"},"main":"./src","keywords":["json","streamify","stringify","walk","parse","parser","serialise","serialize","read","write","async","asynchronous"],"repository":{"type":"git","url":"https://github.com/philbooth/bfj.git"},"dependencies":{"check-types":"3.2.x"},"devDependencies":{"jshint":"2.7.x","mocha":"2.2.x","chai":"2.3.x","mockery":"1.4.x","spooks":"2.0.x"},"scripts":{"test":"mocha --ui tdd --reporter spec --recursive --colors --slow 120 test","lint":"jshint src"},"contributors":[{"name":"Phil Booth","email":"pmbooth@gmail.com","url":"https://github.com/philbooth"}],"gitHead":"ad1bb2ec43c43c7dba53205babe93845cf5ebeea","_id":"bfj@0.2.0","_shasum":"9c330de9085970f9ba279090458641828ff39079","_from":".","_npmVersion":"2.8.3","_nodeVersion":"1.8.1","_npmUser":{"name":"philbooth","email":"pmbooth@gmail.com"},"maintainers":[{"name":"philbooth","email":"pmbooth@gmail.com"}],"dist":{"shasum":"9c330de9085970f9ba279090458641828ff39079","tarball":"https://registry.npmjs.org/bfj/-/bfj-0.2.0.tgz"},"directories":{}},"1.0.0":{"name":"bfj","version":"1.0.0","description":"Big-friendly JSON. Asynchronous streaming functions for large JSON data sets.","homepage":"https://github.com/philbooth/bfj","bugs":{"url":"https://github.com/philbooth/bfj/issues"},"license":"MIT","author":{"name":"Phil Booth","url":"https://github.com/philbooth"},"main":"./src","keywords":["json","streamify","stringify","walk","parse","parser","serialise","serialize","read","write","async","asynchronous"],"repository":{"type":"git","url":"https://github.com/philbooth/bfj.git"},"dependencies":{"check-types":"~3.2"},"devDependencies":{"jshint":"~2.7","mocha":"~2.2","chai":"~2.3","mockery":"~1.4","spooks":"~2.0"},"scripts":{"lint":"jshint src","test":"npm run unit && npm run integration","unit":"mocha --ui tdd --reporter spec --recursive --colors --slow 120 test/unit","integration":"mocha --ui tdd --reporter spec --colors test/integration","perfbig":"wget -O test/mtg.json http://mtgjson.com/json/AllSets-x.json && node test/performance mtg","perfsmall":"wget -O test/wpt.json https://raw.githubusercontent.com/nature/webpagetest-mapper/master/examples/dump.json && node test/performance wpt"},"contributors":[{"name":"Phil Booth","email":"pmbooth@gmail.com","url":"https://github.com/philbooth"}],"gitHead":"d446c0c39eef9f28aa9cb173498c0d7c0fb6f7b2","_id":"bfj@1.0.0","_shasum":"74343b06744cb882a221a8480a79296b0ac95e68","_from":".","_npmVersion":"2.10.1","_nodeVersion":"2.1.0","_npmUser":{"name":"philbooth","email":"pmbooth@gmail.com"},"maintainers":[{"name":"philbooth","email":"pmbooth@gmail.com"}],"dist":{"shasum":"74343b06744cb882a221a8480a79296b0ac95e68","tarball":"https://registry.npmjs.org/bfj/-/bfj-1.0.0.tgz"},"directories":{}},"1.1.0":{"name":"bfj","version":"1.1.0","description":"Big-friendly JSON. Asynchronous streaming functions for large JSON data sets.","homepage":"https://github.com/philbooth/bfj","bugs":{"url":"https://github.com/philbooth/bfj/issues"},"license":"MIT","author":{"name":"Phil Booth","url":"https://github.com/philbooth"},"main":"./src","keywords":["json","streamify","stringify","walk","parse","parser","serialise","serialize","read","write","async","asynchronous"],"repository":{"type":"git","url":"https://github.com/philbooth/bfj.git"},"dependencies":{"check-types":"~3.2"},"devDependencies":{"jshint":"~2.7","mocha":"~2.2","chai":"~2.3","mockery":"~1.4","spooks":"~2.0"},"scripts":{"lint":"jshint src","test":"npm run unit && npm run integration","unit":"mocha --ui tdd --reporter spec --recursive --colors --slow 120 test/unit","integration":"mocha --ui tdd --reporter spec --colors test/integration","perfbig":"wget -O test/mtg.json http://mtgjson.com/json/AllSets-x.json && node test/performance mtg","perfsmall":"wget -O test/wpt.json https://raw.githubusercontent.com/nature/webpagetest-mapper/master/examples/dump.json && node test/performance wpt"},"contributors":[{"name":"Phil Booth","email":"pmbooth@gmail.com","url":"https://github.com/philbooth"}],"gitHead":"f620d50cf4e98b5f84e2542edabd178e52ba3582","_id":"bfj@1.1.0","_shasum":"6acd9619489bd5913a46b9346e5dcbe02f52d15e","_from":".","_npmVersion":"2.10.1","_nodeVersion":"2.1.0","_npmUser":{"name":"philbooth","email":"pmbooth@gmail.com"},"maintainers":[{"name":"philbooth","email":"pmbooth@gmail.com"}],"dist":{"shasum":"6acd9619489bd5913a46b9346e5dcbe02f52d15e","tarball":"https://registry.npmjs.org/bfj/-/bfj-1.1.0.tgz"},"directories":{}},"1.2.0":{"name":"bfj","version":"1.2.0","description":"Big-friendly JSON. Asynchronous streaming functions for large JSON data sets.","homepage":"https://github.com/philbooth/bfj","bugs":{"url":"https://github.com/philbooth/bfj/issues"},"license":"MIT","author":{"name":"Phil Booth","url":"https://github.com/philbooth"},"main":"./src","keywords":["json","streamify","stringify","walk","parse","parser","serialise","serialize","read","write","async","asynchronous"],"repository":{"type":"git","url":"git+https://github.com/philbooth/bfj.git"},"dependencies":{"check-types":"~3.2"},"devDependencies":{"jshint":"~2.7","mocha":"~2.2","chai":"~2.3","mockery":"~1.4","spooks":"~2.0"},"scripts":{"lint":"jshint src","test":"npm run unit && npm run integration","unit":"mocha --ui tdd --reporter spec --recursive --colors --slow 120 test/unit","integration":"mocha --ui tdd --reporter spec --colors test/integration","perfbig":"wget -O test/mtg.json http://mtgjson.com/json/AllSets-x.json && node test/performance mtg","perfsmall":"wget -O test/wpt.json https://raw.githubusercontent.com/nature/webpagetest-mapper/master/examples/dump.json && node test/performance wpt"},"contributors":[{"name":"Phil Booth","email":"pmbooth@gmail.com","url":"https://github.com/philbooth"}],"gitHead":"0063e2e025d6216c344acce9b544908cd9b76a2f","_id":"bfj@1.2.0","_shasum":"d7666bb53794fe8961c7f1825832e38d1816ffab","_from":".","_npmVersion":"2.11.2","_nodeVersion":"0.12.4","_npmUser":{"name":"philbooth","email":"pmbooth@gmail.com"},"maintainers":[{"name":"philbooth","email":"pmbooth@gmail.com"}],"dist":{"shasum":"d7666bb53794fe8961c7f1825832e38d1816ffab","tarball":"https://registry.npmjs.org/bfj/-/bfj-1.2.0.tgz"},"directories":{}},"1.2.1":{"name":"bfj","version":"1.2.1","description":"Big-friendly JSON. Asynchronous streaming functions for large JSON data sets.","homepage":"https://github.com/philbooth/bfj","bugs":{"url":"https://github.com/philbooth/bfj/issues"},"license":"MIT","author":{"name":"Phil Booth","url":"https://github.com/philbooth"},"main":"./src","keywords":["json","streamify","stringify","walk","parse","parser","serialise","serialize","read","write","async","asynchronous"],"repository":{"type":"git","url":"https://github.com/philbooth/bfj.git"},"dependencies":{"check-types":"~3.2"},"devDependencies":{"jshint":"~2.7","mocha":"~2.2","chai":"~2.3","mockery":"~1.4","spooks":"~2.0"},"scripts":{"lint":"jshint src","test":"npm run unit && npm run integration","unit":"mocha --ui tdd --reporter spec --recursive --colors --slow 120 test/unit","integration":"mocha --ui tdd --reporter spec --colors test/integration","perfbig":"wget -O test/mtg.json http://mtgjson.com/json/AllSets-x.json && node test/performance mtg","perfsmall":"wget -O test/wpt.json https://raw.githubusercontent.com/nature/webpagetest-mapper/master/examples/dump.json && node test/performance wpt"},"contributors":[{"name":"Phil Booth","email":"pmbooth@gmail.com","url":"https://github.com/philbooth"}],"gitHead":"6a4e91bf8c9fd1e48f26350a352ad1a2729dfffb","_id":"bfj@1.2.1","_shasum":"5391c017d42747bcc6bbb80672a5db76bc89abf8","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.1","_npmUser":{"name":"philbooth","email":"pmbooth@gmail.com"},"maintainers":[{"name":"philbooth","email":"pmbooth@gmail.com"}],"dist":{"shasum":"5391c017d42747bcc6bbb80672a5db76bc89abf8","tarball":"https://registry.npmjs.org/bfj/-/bfj-1.2.1.tgz"},"directories":{}},"1.2.2":{"name":"bfj","version":"1.2.2","description":"Big-friendly JSON. Asynchronous streaming functions for large JSON data sets.","homepage":"https://github.com/philbooth/bfj","bugs":{"url":"https://github.com/philbooth/bfj/issues"},"license":"MIT","author":{"name":"Phil Booth","url":"https://github.com/philbooth"},"main":"./src","keywords":["json","streamify","stringify","walk","parse","parser","serialise","serialize","read","write","async","asynchronous"],"repository":{"type":"git","url":"https://github.com/philbooth/bfj.git"},"dependencies":{"check-types":"~3.2"},"devDependencies":{"jshint":"~2.7","mocha":"~2.2","chai":"~2.3","mockery":"~1.4","spooks":"~2.0"},"scripts":{"lint":"jshint src","test":"npm run unit && npm run integration","unit":"mocha --ui tdd --reporter spec --recursive --colors --slow 120 test/unit","integration":"mocha --ui tdd --reporter spec --colors test/integration","perfbig":"wget -O test/mtg.json http://mtgjson.com/json/AllSets-x.json && node test/performance mtg","perfsmall":"wget -O test/wpt.json https://raw.githubusercontent.com/nature/webpagetest-mapper/master/examples/dump.json && node test/performance wpt"},"contributors":[{"name":"Phil Booth","email":"pmbooth@gmail.com","url":"https://github.com/philbooth"},{"name":"Rowan Manning","url":"https://github.com/rowanmanning"}],"gitHead":"d3847440cd72114d38145de428313ae622d59a09","_id":"bfj@1.2.2","_shasum":"38994ac67fff8d56c467268feaf5abff1e97b16a","_from":".","_npmVersion":"2.4.1","_nodeVersion":"0.10.40","_npmUser":{"name":"philbooth","email":"pmbooth@gmail.com"},"dist":{"shasum":"38994ac67fff8d56c467268feaf5abff1e97b16a","tarball":"https://registry.npmjs.org/bfj/-/bfj-1.2.2.tgz"},"maintainers":[{"name":"philbooth","email":"pmbooth@gmail.com"}],"directories":{}},"2.0.0":{"name":"bfj","version":"2.0.0","description":"Big-friendly JSON. Asynchronous streaming functions for large JSON data sets.","homepage":"https://github.com/philbooth/bfj","bugs":{"url":"https://github.com/philbooth/bfj/issues"},"license":"MIT","author":{"name":"Phil Booth","url":"https://github.com/philbooth"},"main":"./src","keywords":["json","streamify","stringify","walk","parse","parser","serialise","serialize","read","write","async","asynchronous"],"repository":{"type":"git","url":"https://github.com/philbooth/bfj.git"},"dependencies":{"check-types":"6.0.x"},"devDependencies":{"eslint":"2.7.x","esprima":"2.7.x","mocha":"2.4.x","chai":"3.5.x","mockery":"1.4.x","spooks":"2.0.x"},"scripts":{"lint":"eslint src","test":"npm run unit && npm run integration","unit":"mocha --ui tdd --reporter spec --recursive --colors --slow 120 test/unit","integration":"mocha --ui tdd --reporter spec --colors test/integration","perfbig":"wget -O test/mtg.json http://mtgjson.com/json/AllSets-x.json && node test/performance mtg","perfsmall":"wget -O test/wpt.json https://raw.githubusercontent.com/springernature/webpagetest-mapper/master/examples/dump.json && node test/performance wpt"},"contributors":[{"name":"Phil Booth","email":"pmbooth@gmail.com","url":"https://github.com/philbooth"},{"name":"Rowan Manning","url":"https://github.com/rowanmanning"}],"gitHead":"fc2c4018f1324675012ddba947056453990f7785","_id":"bfj@2.0.0","_shasum":"e1d7f749201e4a5b5b003def4e4ea2df977baf39","_from":".","_npmVersion":"2.4.1","_nodeVersion":"4.4.2","_npmUser":{"name":"philbooth","email":"pmbooth@gmail.com"},"dist":{"shasum":"e1d7f749201e4a5b5b003def4e4ea2df977baf39","tarball":"https://registry.npmjs.org/bfj/-/bfj-2.0.0.tgz"},"maintainers":[{"name":"philbooth","email":"pmbooth@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/bfj-2.0.0.tgz_1460291608893_0.6028850427828729"},"directories":{}},"2.1.0":{"name":"bfj","version":"2.1.0","description":"Big-friendly JSON. Asynchronous streaming functions for large JSON data sets.","homepage":"https://github.com/philbooth/bfj","bugs":{"url":"https://github.com/philbooth/bfj/issues"},"license":"MIT","author":{"name":"Phil Booth","url":"https://github.com/philbooth"},"main":"./src","keywords":["json","streamify","stringify","walk","parse","parser","serialise","serialize","read","write","async","asynchronous"],"repository":{"type":"git","url":"https://github.com/philbooth/bfj.git"},"dependencies":{"check-types":"6.0.x"},"devDependencies":{"eslint":"2.7.x","esprima":"2.7.x","mocha":"2.4.x","chai":"3.5.x","mockery":"1.4.x","spooks":"2.0.x"},"scripts":{"lint":"eslint src","test":"npm run unit && npm run integration","unit":"mocha --ui tdd --reporter spec --recursive --colors --slow 120 test/unit","integration":"mocha --ui tdd --reporter spec --colors test/integration","perfbig":"wget -O test/mtg.json http://mtgjson.com/json/AllSets-x.json && node test/performance mtg","perfsmall":"wget -O test/wpt.json https://raw.githubusercontent.com/springernature/webpagetest-mapper/master/examples/dump.json && node test/performance wpt"},"contributors":[{"name":"Phil Booth","email":"pmbooth@gmail.com","url":"https://github.com/philbooth"},{"name":"Rowan Manning","url":"https://github.com/rowanmanning"}],"gitHead":"d7e2ce1e57e7a2b6a07201736c21d86e98756e79","_id":"bfj@2.1.0","_shasum":"52798d5bab08815807220e243e897c16c93108e0","_from":".","_npmVersion":"2.4.1","_nodeVersion":"4.4.3","_npmUser":{"name":"philbooth","email":"pmbooth@gmail.com"},"dist":{"shasum":"52798d5bab08815807220e243e897c16c93108e0","tarball":"https://registry.npmjs.org/bfj/-/bfj-2.1.0.tgz"},"maintainers":[{"name":"philbooth","email":"pmbooth@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/bfj-2.1.0.tgz_1462557620849_0.09111722675152123"},"directories":{}}},"readme":"# BFJ\n\n[![Build status][ci-image]][ci-status]\n\nBig-Friendly JSON. Asynchronous streaming functions for large JSON data sets.\n\n* [Why would I want those?](#why-would-i-want-those)\n* [What functions does it implement?](#what-functions-does-it-implement)\n* [How do I install it?](#how-do-i-install-it)\n* [How do I read a JSON file?](#how-do-i-read-a-json-file)\n* [How do I write a JSON file?](#how-do-i-write-a-json-file)\n* [How do I parse a stream of JSON?](#how-do-i-parse-a-stream-of-json)\n* [How do I create a JSON string?](#how-do-i-create-a-json-string)\n* [How do I create a stream of JSON?](#how-do-i-create-a-stream-of-json)\n* [What other methods are there?](#what-other-methods-are-there)\n  * [bfj.walk (stream, options)](#bfjwalk-stream-options)\n  * [bfj.eventify (data, options)](#bfjeventify-data-options)\n* [What options can I specify?](#what-options-can-i-specify)\n  * [Options for parsing functions](#options-for-parsing-functions)\n  * [Options for serialisation functions](#options-for-serialisation-functions)\n* [Is there a change log?](#is-there-a-change-log)\n* [How do I set up the dev environment?](#how-do-i-set-up-the-dev-environment)\n* [What versions of Node.js does it support?](#what-versions-of-nodejs-does-it-support)\n* [What license is it released under?](#what-license-is-it-released-under)\n\n## Why would I want those?\n\nIf you need\nto parse\nlarge JSON strings\nor stringify\nlarge JavaScript data sets,\nit makes sense\nto do so asynchronously\nrather than\nmonopolising\nthe event loop.\nBFJ implements\nthose asynchronous functions.\n\n## What functions does it implement?\n\nSeven functions\nare exported.\n\nThree are\nconcerned with\nparsing, or\nturning JSON strings\ninto JavaScript data:\n\n* [`read`](#how-do-i-read-a-json-file)\n  asynchronously parses\n  a JSON file from disk.\n\n* [`parse`](#how-do-i-parse-a-stream-of-json)\n  asynchronously parses\n  a stream of JSON.\n\n* [`walk`](#bfjwalk-stream-options)\n  asynchronously walks\n  a stream,\n  emitting events\n  as it encounters\n  JSON tokens.\n  Analagous to a\n  [SAX parser][sax].\n\nThe other four functions\nhandle the reverse transformations,\nserialising\nJavaScript data\nto JSON:\n\n* [`write`](#how-do-i-write-a-json-file)\n  asynchronously serialises data\n  to a JSON file on disk.\n\n* [`stringify`](#how-do-i-create-a-json-string)\n  asynchronously serialises data\n  to a JSON string.\n\n* [`streamify`](#how-do-i-create-a-stream-of-json)\n  asynchronously serialises data\n  to a stream of JSON.\n\n* [`eventify`](#bfjeventify-data-options)\n  asynchronously traverses\n  a data structure\n  depth-first,\n  emitting events\n  as it encounters items.\n  By default\n  it coerces\n  promises, buffers and iterables\n  to JSON-friendly values.\n\n## How do I install it?\n\nIf you're using npm:\n\n```\nnpm i bfj --save\n```\n\nOr if you just want\nthe git repo:\n\n```\ngit clone git@github.com:philbooth/bfj.git\n```\n\n## How do I read a JSON file?\n\n```js\nconst bfj = require('bfj');\n\nbfj.read(path)\n  .then(data => {\n    // :)\n  })\n  .catch(error => {\n    // :(\n  });\n```\n\n`read` returns a [promise](promise) and\nasynchronously parses\na JSON file\nfrom disk.\n\nIt takes two arguments;\nthe path to the JSON file\nand an [options](#options-for-parsing-functions) object.\n\nIf there are\nno syntax errors,\nthe returned promise is resolved\nwith the parsed data.\nIf syntax errors occur,\nthe promise is rejected\nwith the first error.\n\n## How do I write a JSON file?\n\n```js\nconst bfj = require('bfj');\n\nbfj.write(path, data)\n  .then(() => {\n    // :)\n  })\n  .catch(error => {\n    // :(\n  });\n```\n\n`write` returns a [promise](promise)\nand asynchronously serialises a data structure\nto a JSON file on disk.\nThe promise is resolved\nwhen the file has been written,\nor rejected with the error\nif writing failed.\n\nIt takes three arguments;\nthe path to the JSON file,\nthe data structure to serialise\nand an [options](#options-for-serialisation-functions) object.\n\n## How do I parse a stream of JSON?\n\n```js\nconst bfj = require('bfj');\n\nbfj.parse(fs.createReadStream(path))\n  .then(data => {\n    // :)\n  })\n  .catch(error => {\n    // :(\n  });\n```\n\n`parse` returns a [promise](promise)\nand asynchronously parses\na stream of JSON data.\n\nIt takes two arguments;\na [readable stream][readable]\nfrom which\nthe JSON\nwill be parsed\nand an [options](#options-for-parsing-functions) object.\n\nIf there are\nno syntax errors,\nthe returned promise is resolved\nwith the parsed data.\nIf syntax errors occur,\nthe promise is rejected\nwith the first error.\n\n## How do I create a JSON string?\n\n```js\nconst bfj = require('bfj');\n\nbfj.stringify(data)\n  .then(json => {\n    // :)\n  })\n  .catch(error => {\n    // :(\n  });\n```\n\n`stringify` returns a [promise](promise) and\nasynchronously serialises a data structure\nto a JSON string.\nThe promise is resolved\nto the JSON string\nwhen serialisation is complete.\n\nIt takes two arguments;\nthe data structure to serialise\nand an [options](#options-for-serialisation-functions) object.\n\n## How do I create a stream of JSON?\n\n```js\nconst bfj = require('bfj');\n\nconst stream = bfj.streamify(data);\n\n// Get data out of the stream with event handlers\nstream.on('data', chunk => { /* ... */ });\nstream.on('end', () => { /* ... */);\nstream.on('dataError', () => { /* ... */);\n\n// ...or you can pipe it to another stream\nstream.pipe(someOtherStream);\n```\n\n`streamify` returns a [readable stream][readable]\nand asynchronously serialises\na data structure to JSON,\npushing the result\nto the returned stream.\n\nIt takes two arguments;\nthe data structure to serialise\nand an [options](#options-for-serialisation-functions) object.\n\n## What other methods are there?\n\n### bfj.walk (stream, options)\n\n```js\nconst bfj = require('bfj');\n\nconst emitter = bfj.walk(fs.createReadStream(path));\n\nemitter.on(bfj.events.array, () => { /* ... */ });\nemitter.on(bfj.events.object, () => { /* ... */ });\nemitter.on(bfj.events.property, name => { /* ... */ });\nemitter.on(bfj.events.string, value => { /* ... */ });\nemitter.on(bfj.events.number, value => { /* ... */ });\nemitter.on(bfj.events.literal, value => { /* ... */ });\nemitter.on(bfj.events.endArray, () => { /* ... */ });\nemitter.on(bfj.events.endObject, () => { /* ... */ });\nemitter.on(bfj.events.error, error => { /* ... */ });\nemitter.on(bfj.events.end, () => { /* ... */ });\n```\n\n`walk` returns an [event emitter][eventemitter]\nand asynchronously walks\na stream of JSON data,\nemitting events\nas it encounters\ntokens.\n\nIt takes two arguments;\na [readable stream][readable]\nfrom which\nthe JSON\nwill be read\nand an [options](#options-for-parsing-functions) object.\n\nThe emitted events\nare defined\nas public properties\nof an object,\n`bfj.events`:\n\n* `bfj.events.array`\n  indicates that\n  an array context\n  has been entered\n  by encountering\n  the `[` character.\n\n* `bfj.events.endArray`\n  indicates that\n  an array context\n  has been left\n  by encountering\n  the `]` character.\n\n* `bfj.events.object`\n  indicates that\n  an object context\n  has been entered\n  by encountering\n  the `{` character.\n\n* `bfj.events.endObject`\n  indicates that\n  an object context\n  has been left\n  by encountering\n  the `}` character.\n\n* `bfj.events.property`\n  indicates that\n  a property\n  has been encountered\n  in an object.\n  The listener\n  will be passed\n  the name of the property\n  as its argument\n  and the next event\n  to be emitted\n  will represent\n  the property's value.\n\n* `bfj.events.string`\n  indicates that\n  a string\n  has been encountered.\n  The listener\n  will be passed\n  the value\n  as its argument.\n\n* `bfj.events.number`\n  indicates that\n  a number\n  has been encountered.\n  The listener\n  will be passed\n  the value\n  as its argument.\n\n* `bfj.events.literal`\n  indicates that\n  a JSON literal\n  (either `true`, `false` or `null`)\n  has been encountered.\n  The listener\n  will be passed\n  the value\n  as its argument.\n\n* `bfj.events.error`\n  indicates that\n  a syntax error\n  has occurred.\n  The listener\n  will be passed\n  the `Error` instance\n  as its argument.\n\n* `bfj.events.end`\n  indicates that\n  the end of the input\n  has been reached\n  and the stream is closed.\n\n### bfj.eventify (data, options)\n\n```js\nconst bfj = require('bfj');\n\nconst emitter = bfj.eventify(data);\n\nemitter.on(bfj.events.array, () => { /* ... */ });\nemitter.on(bfj.events.object, () => { /* ... */ });\nemitter.on(bfj.events.property, name => { /* ... */ });\nemitter.on(bfj.events.string, value => { /* ... */ });\nemitter.on(bfj.events.number, value => { /* ... */ });\nemitter.on(bfj.events.literal, value => { /* ... */ });\nemitter.on(bfj.events.endArray, () => { /* ... */ });\nemitter.on(bfj.events.endObject, () => { /* ... */ });\nemitter.on(bfj.events.end, () => { /* ... */ });\n```\n\n`eventify` returns an [event emitter][eventemitter]\nand asynchronously traverses\na data structure depth-first,\nemitting events as it\nencounters items.\nBy default it coerces\npromises, buffers and iterables\nto JSON-friendly values.\n\nIt takes two arguments;\nthe data structure to traverse\nand an [options](#options-for-serialisation-functions) object.\n\nThe emitted events\nare defined\nas public properties\nof an object,\n`bfj.events`:\n\n* `bfj.events.array`\n  indicates that\n  an array\n  has been encountered.\n\n* `bfj.events.endArray`\n  indicates that\n  the end of an array\n  has been encountered.\n\n* `bfj.events.object`\n  indicates that\n  an object\n  has been encountered.\n\n* `bfj.events.endObject`\n  indicates that\n  the end of an object\n  has been encountered.\n\n* `bfj.events.property`\n  indicates that\n  a property\n  has been encountered\n  in an object.\n  The listener\n  will be passed\n  the name of the property\n  as its argument\n  and the next event\n  to be emitted\n  will represent\n  the property's value.\n\n* `bfj.events.string`\n  indicates that\n  a string\n  has been encountered.\n  The listener\n  will be passed\n  the value\n  as its argument.\n\n* `bfj.events.number`\n  indicates that\n  a number\n  has been encountered.\n  The listener\n  will be passed\n  the value\n  as its argument.\n\n* `bfj.events.literal`\n  indicates that\n  a JSON literal\n  (either `true`, `false` or `null`)\n  has been encountered.\n  The listener\n  will be passed\n  the value\n  as its argument.\n\n* `bfj.events.error`\n  indicates that\n  a circular reference\n  was encountered\n  in the data.\n  The listener\n  will be passed\n  the `Error` instance\n  as its argument.\n\n* `bfj.events.end`\n  indicates that\n  the end of the data\n  has been reached and\n  no further events\n  will be emitted.\n\n## What options can I specify?\n\n### Options for parsing functions\n\n* `options.reviver`:\n  Transformation function,\n  invoked depth-first\n  against the parsed\n  data structure.\n  This option\n  is analagous to the\n  [reviver parameter for JSON.parse][reviver].\n\n* `options.discard`:\n  The number of characters\n  to process before\n  discarding them\n  to save memory.\n  The default value\n  is `16384`.\n\n### Options for serialisation functions\n\n* `options.space`:\n  Indentation string\n  or the number of spaces\n  to indent\n  each nested level by.\n  This option\n  is analagous to the\n  [space parameter for JSON.stringify][space].\n\n* `options.promises`:\n  By default,\n  promises are coerced\n  to their resolved value.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore promises\n  in the data.\n\n* `options.buffers`:\n  By default,\n  buffers are coerced\n  using their `toString` method.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore buffers\n  in the data.\n\n* `options.maps`:\n  By default,\n  maps are coerced\n  to plain objects.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore maps\n  in the data.\n\n* `options.iterables`:\n  By default,\n  other iterables\n  (i.e. not arrays, strings or maps)\n  are coerced\n  to arrays.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore other iterables\n  in the data.\n\n* `options.circular`:\n  By default,\n  circular references\n  will cause the write\n  to fail.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to silently skip past\n  circular references\n  in the data.\n\n## Is there a change log?\n\n[Yes][history].\n\n## How do I set up the dev environment?\n\nThe development environment\nrelies on [Node.js][node],\n[ESLint],\n[Mocha],\n[Chai],\n[Mockery] and\n[Spooks].\nAssuming that\nyou already have\nnode and NPM\nset up,\nyou just need\nto run\n`npm install`\nto install\nall of the dependencies\nas listed in `package.json`.\n\nYou can\nlint the code\nwith the command\n`npm run lint`.\n\nYou can\nrun the tests\nwith the command\n`npm test`.\n\n## What versions of Node.js does it support?\n\n4 and later.\n\n## What license is it released under?\n\n[MIT][license].\n\n[ci-image]: https://secure.travis-ci.org/philbooth/bfj.png?branch=master\n[ci-status]: http://travis-ci.org/#!/philbooth/bfj\n[sax]: http://en.wikipedia.org/wiki/Simple_API_for_XML\n[promise]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\n[eventemitter]: https://nodejs.org/api/events.html#events_class_events_eventemitter\n[readable]: https://nodejs.org/api/stream.html#stream_class_stream_readable\n[reviver]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter\n[space]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_space_argument\n[history]: HISTORY.md\n[node]: https://nodejs.org/en/\n[eslint]: http://eslint.org/\n[mocha]: https://mochajs.org/\n[chai]: http://chaijs.com/\n[mockery]: https://github.com/mfncooper/mockery\n[spooks]: https://github.com/philbooth/spooks.js\n[license]: COPYING\n\n","maintainers":[{"name":"philbooth","email":"pmbooth@gmail.com"}],"time":{"modified":"2016-05-06T18:00:23.296Z","created":"2015-03-11T20:43:10.916Z","0.0.1":"2015-03-11T20:43:10.916Z","0.1.0":"2015-04-03T16:02:02.139Z","0.2.0":"2015-05-04T21:37:02.808Z","1.0.0":"2015-05-27T17:13:31.783Z","1.1.0":"2015-06-01T11:59:38.604Z","1.2.0":"2015-07-26T12:17:46.190Z","1.2.1":"2015-10-20T18:05:51.307Z","1.2.2":"2016-01-05T11:37:15.507Z","2.0.0":"2016-04-10T12:33:29.996Z","2.1.0":"2016-05-06T18:00:23.296Z"},"homepage":"https://github.com/philbooth/bfj","keywords":["json","streamify","stringify","walk","parse","parser","serialise","serialize","read","write","async","asynchronous"],"repository":{"type":"git","url":"https://github.com/philbooth/bfj.git"},"contributors":[{"name":"Phil Booth","email":"pmbooth@gmail.com","url":"https://github.com/philbooth"},{"name":"Rowan Manning","url":"https://github.com/rowanmanning"}],"author":{"name":"Phil Booth","url":"https://github.com/philbooth"},"bugs":{"url":"https://github.com/philbooth/bfj/issues"},"license":"MIT","readmeFilename":"README.md","_attachments":{},"_etag":"\"ES6J6KE3HXQGTU857PYZKESEJ\""}